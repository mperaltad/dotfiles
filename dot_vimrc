" -------------------------------------------------
" Ideas mostly stoled from:
" https://github.com/jez/vim-as-an-ide/tree/master
" -------------------------------------------------

set nocompatible

call plug#begin('~/.vim/plugged') " PlugInstall, PlugUpdate, PlugClean, PlugUpgrade, PlugDiff

" ----- Look&Feel ------------------------------------------------------
Plug 'vim-airline/vim-airline' " status/tabline for vim 
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'tpope/vim-obsession'
Plug 'dhruvasagar/vim-prosession'
Plug 'christoomey/vim-tmux-navigator'
Plug 'Yggdroot/indentLine'

" ----- Writing code ---------------------------------------------------
Plug 'Raimondi/delimitMate' " automatic closing of quotes, parenthesis, brackets, etc.
Plug 'sheerun/vim-polyglot' " Syntax help for a ton of languages
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Autocompletion, syntax check based on VSCode
Plug 'matze/vim-move' " text movement functionality editor
" <A-k>   Move current line/selection up
" <A-j>   Move current line/selection down
" <A-h>   Move current character/selection left
" <A-l>   Move current character/selection right
Plug 'mbbill/undotree' " Mapped to F5 
Plug 'christoomey/vim-system-copy' " cp copy and cv paste from/to system
" clipboard. cP copies the current line and cV pastes system clipboard to the
" next line
Plug 'ojroques/vim-oscyank' " Plugin to copy text to system clipboard
Plug 'junegunn/vim-peekaboo' " Register contents on the sidebar when hitting \" or @ in normal mode or <CTRL-R> in insert mode
 

" ----- Files interaction ----------------------------------------------
"Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'preservim/nerdtree'
Plug 'jistr/vim-nerdtree-tabs' " F2 to open tab with file tree 
" i open file in horizontal split
" v open file in vertical split
" t open file in new tab
" I toggle hidden files
" m NerdTree menu
Plug 'junegunn/fzf' " enables :FZF command (:FZF! for fullscreen) CTRL-T, CTRL-X or CTRL-V to open in a new tabs, in horizontal splits, of in vertical splits respectively
Plug 'junegunn/fzf.vim' " :Rg or :RG for search recursively :GFiles git ls-files, :Files fzf ctrl+t in popup, use ! after for fullscreen mode e.g. :Rg! .reference: https://github.com/junegunn/fzf.vim?tab=readme-ov-file#commands
" :RG search in working folder relaunching on every keystroke
" :Files 
" :GFiles git ls-files 
" :Changes Changelist across all open buffers
" <C-v> open in a vertical split
" <C-x> open in a horizontal split 
" <C-t> open in a new tab
" Use ! after for fullscreen mode rather than popups e.g. :Files! 
" https://github.com/junegunn/fzf.vim?tab=readme-ov-file#commands

" ----- Git stuff ------------------------------------------------------
Plug 'airblade/vim-gitgutter' " GIT: shows +,- or ~ next to line changed in git
Plug 'tpope/vim-fugitive' " GIT: interactions with git from vim directly
Plug 'christoomey/vim-conflicted' " Git Merge resolution (mapped to git conflicted)

" Initialize plugin system
call plug#end()

" ================

" = vim settings =
" ================
set nu                    " Enable line numbers
syntax on                 " Enable synax highlighting
set incsearch             " Enable incremental search
set hlsearch              " Enable highlight search
set splitbelow            " Always split below"
set mouse=a               " Enable mouse drag on window splits
set tabstop=4             " How many columns of whitespace a \t is worth
set shiftwidth=4          " How many columns of whitespace a “level of indentation” is worth
set expandtab             " Use spaces when tabbing

set autoindent
set smartindent
set backspace=indent,eol,start
filetype plugin indent on


highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

set nocompatible
set hidden
set encoding=utf-8
"set showtabline=0
"nnoremap <silent><C-p> :CtrlSpace O<CR>
"hi CtrlSpaceSearch guifg=#cb4b16 guibg=#000000 gui=bold ctermfg=9 ctermbg=0 term=bold cterm=bold
"hi CtrlSpaceSelected term=reverse ctermfg=187   guifg=#d7d7af ctermbg=23    guibg=#005f5f cterm=bold gui=bold
"hi CtrlSpaceNormal   term=NONE    ctermfg=244   guifg=#808080 ctermbg=232   guibg=#080808 cterm=NONE gui=NONE
"hi CtrlSpaceFound    ctermfg=220  guifg=#ffd700 ctermbg=NONE  guibg=NONE    cterm=bold gui=bold
"hi CtrlSpaceStatus   ctermfg=230  guifg=#ffffd7 ctermbg=234   guibg=#1c1c1c cterm=NONE gui=NONE

" Making default peekaboo (the plugin that shows the register history) a bit
" bigger than by default
let g:peekaboo_window = 'vert bo 50new'

" We need this for plugins like Syntastic and vim-gitgutter which put symbols
" in the sign column.
hi clear SignColumn

" If you cannot change it, just embrace it
command! Qa :qa
command! Q :q

" ---- FZF foo ------
" Using F1 for Files floating and S-F1 for Full screen
nnoremap <F1> :Files<CR>
nnoremap <S-F1> :Files!<CR>
" Same for RG and F3
nnoremap <F3> :RG<CR>
nnoremap <S-F3> :RG!<CR>
" Open Buffers and F4
nnoremap <F4> :Buffers<CR>
nnoremap <S-F4> :Buffers!<CR>
" Vim commands history F7
nnoremap <F7> :History:<CR>
nnoremap <S-F7> :History:!<CR>

" undotree mapped to F5
nnoremap <F5> :UndotreeToggle<CR>

" Copy/Paste system integration (cross platform in chezmoi template
" pbcopy/pbpaste in OSX, clip/paste in W8s & xsel/wl-copy/wl-paste in Linux)
let g:system_copy_enable_osc52 = 1

" ---- NERDTree -----
let NERDTreeShowHidden = 1
let NERDTreeQuitOnOpen = 1

" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs with \t
nmap <F2> :NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_autofind = 1

" Obsession adding status icons instead of defaults
let g:airline_theme = 'catppuccin_macchiato'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#obsession#indicator_text="󰆓"
let g:airline#extensions#obsession#indicator_text_paused="󱙄"

" coc autocompletion config
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" coc extensions. coc installs the missing ones once the service is started
let g:coc_global_extensions = ['coc-json', 'coc-yaml', 'coc-java', 'coc-markdownlint', '@yaegassy/coc-mypy', 'coc-sh', 'coc-spell-checker', '@yaegassy/coc-ansible', 'coc-docker', 'coc-go', 'coc-jedi', 'coc-nav']

autocmd VimEnter,ColorScheme * hi! link CocFloating CocHintFloat

